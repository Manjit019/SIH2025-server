// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model MigrantWorker {
  id               String   @id @default(uuid())
  workerId         String   @unique @map("worker_id")
  aadhar           BigInt   @unique @map("aadhar_number")
  fullname         String   @map("full_name")
  phone            BigInt   @map("phone_number")
  email            String?
  dateOfBirth      DateTime @map("date_of_birth") @db.Date
  address          Json
  gender           Gender
  occupation       String
  stateOfOrigin    String   @map("state_of_origin")
  emergencyContact String?  @map("emergency_contact")
  profilePhoto     String?  @map("profile_photo")
  isActive         Boolean  @default(true) @map("is_active")
  registeredAt     DateTime @default(now()) @map("registered_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  healthRecords HealthRecord[]
  vacinations   Vaccination[]
  healthPasses  HealthPass[]
  employment    Employement[]

  @@map("migrant_workers")
}

model HealthRecord {
  id                String        @id @default(uuid())
  workerId          String        @map("worker_id")
  checkupDate       DateTime      @map("checkup_date")
  hospitalId        String        @map("hospital_id")
  hospital          Hospital      @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  doctorId          String        @map("doctor_id")
  doctor            Doctor        @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  bloodPressure     String?       @map("blood_pressure")
  temperature       String?
  weight            String?
  height            String?
  bloodGroup        String?       @map("blood_group")
  allergies         String?
  medicalConditions String?       @map("medical_conditions")
  medications       String?
  fitnessStatus     FitnessStatus @map("fitness_status")
  remarks           String?
  certificatePath   String?       @map("certificate_path")
  isVerified        Boolean       @default(false) @map("is_verified")
  verifiedBy        String?       @map("verified_by")
  verifiedAt        DateTime?     @map("verified_at")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  worker MigrantWorker @relation(fields: [workerId], references: [workerId], onDelete: Cascade)

  @@index([workerId])
  @@index([hospitalId])
  @@index([doctorId])
  @@map("health_records")
}

model Vaccination {
  id                String     @id @default(uuid())
  workerId          String     @map("worker_id")
  vaccineName       VaccinType @map("vaccine_name")
  vaccineType       VaccinType @map("vaccine_type")
  adminsteredDate   DateTime   @map("adminstered_date") @db.Date
  nextDueDate       DateTime   @map("next_due_date") @db.Date
  batchNumber       String     @map("batch_number")
  manufacturer      String     @map("manufacturer")
  adminsteredBy     String     @map("adminstered_by")
  hospitalName      String     @map("hospital_name")
  certificateNumber String     @unique @map("certificate_number")
  certificatePath   String?    @map("certificate_path")
  isVerified        Boolean    @default(false) @map("is_verified")
  verifiedBy        String?    @map("verified_by")
  verifiedAt        DateTime?  @map("verified_at")
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")

  worker MigrantWorker @relation(fields: [workerId], references: [workerId], onDelete: Cascade)

  @@index([workerId])
  @@map("vaccinations")
}

model HealthPass {
  id                String           @id @default(uuid())
  workerId          String           @unique @map("worker_id")
  passNumber        String           @unique @map("pass_number")
  qrCode            String           @unique @map("qr_code")
  status            HealthPassStatus @default(PENDING)
  issuedDate        DateTime?        @map("issued_date")
  expiryDate        DateTime?        @map("expiry_date")
  issuedBy          String?          @map("issued_by")
  certificatePath   String?          @map("certificate_path")
  lastVerifiedAt    DateTime?        @map("last_verified_at")
  verificationCount Int              @default(0) @map("verification_count")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")

  worker MigrantWorker @relation(fields: [workerId], references: [workerId], onDelete: Cascade)

  @@map("health_passes")
}

model Employement {
  id              String    @id @default(uuid())
  workerId        String    @unique @map("worker_id")
  employerName    String    @map("employer_name")
  employerContact String    @map("employer_contact")
  companyName     String    @map("company_name")
  jobTitle        String    @map("job_title")
  workLocation    String    @map("work_location")
  startDate       DateTime  @map("start_date") @db.Date
  endDate         DateTime? @map("end_date") @db.Date
  isActive        Boolean   @default(true) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  worker MigrantWorker @relation(fields: [workerId], references: [workerId], onDelete: Cascade)

  @@map("employements")
}

model Admin {
  id        String    @id @default(nanoid())
  username  String    @unique
  fullname  String    @map("full_name")
  email     String    @unique
  password  String
  role      AdminRole @default(OPERATOR)
  isActive  Boolean   @default(true) @map("is_active")
  lastLogin DateTime? @map("last_login")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("admins")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  action    String
  resources String
  details   Json?
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model Doctor {
  id             String         @id @default(uuid())
  name           String
  phone          BigInt
  email          String         @unique
  specialization String
  departmentId   String
  hospitalId     String
  hospital       Hospital       @relation(fields: [hospitalId], references: [id])
  joinedAt       DateTime       @default(now())
  HealthRecord   HealthRecord[]

  @@index([hospitalId])
}

model Hospital {
  id          String   @id @default(nanoid())
  name        String
  address     Json
  phone       BigInt
  established DateTime
  capacity    Int
  doctors     Doctor[]

  HealthRecord HealthRecord[]
}

//enums
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BloodGroup {
  A_POSITIVE  @map("A+")
  A_NEGATIVE  @map("A-")
  B_POSITIVE  @map("B+")
  B_NEGATIVE  @map("B-")
  AB_POSITIVE @map("AB+")
  AB_NEGATIVE @map("AB-")
  O_POSITIVE  @map("O+")
  O_NEGATIVE  @map("O-")
}

enum FitnessStatus {
  FIT
  UNFIT
  UNDER_TREATMENT
  REQUIRES_FOLLOWUP
}

enum VaccinType {
  COVID19
  HEPATITIS_B
  TYPHOID
  TETANUS
  INFLUENZA
  OTHER
}

enum VaccinStatus {
  NOT_VACCINATED
  PARTIALLY_VACCINATED
  FULLY_VACCINATED
}

enum HealthPassStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
  SUSPENDED
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  OPERATOR
  VIEWER
}
